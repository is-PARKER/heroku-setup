# Heroku Setup # 

This Document is a collection of Notes from the [Heroku documentation](https://devcenter.heroku.com/articles/getting-started-with-python?c=7013A000000txcVQAQ&utm_campaign=Onboarding-2.0-Deploy-1.2-Python&utm_medium=email&utm_source=nurture&utm_content=devcenter&utm_term=start-python#set-up)

The purpose is to create a single reference point as a refresher. 

### Getting Started ###

##### Requirements #####

These are teh requirements for the the tutorial.

1. [Heroku Account](https://signup.heroku.com/signup/dc)
2. Python 3.9 (for tutorial)
3. [Postgres](https://devcenter.heroku.com/articles/heroku-postgresql#local-setup) locally


##### Setting Up Herkou #####

` $ brew install heroku/brew.heroku ` - Mac

Then Login:

`$ heroku login`

##### Deploy an App #####

Navigate to the working directory of the program. Within the directory a `runtime.txt.` should be present along with a `requirements.txt`. 
Now, establish a git repo that will be sent to Heroku as a remote `push`.

Create an app on Heroku that will recieve the source code. This is a randomly generated name (it can be set with a passed parameter). 

`$ heroku create`

Push the repo to heroku. Heroku will take the push as if it was a remote Git, but this will deploye the source code as an app:

`$ git push heroku main` 

The Url is generated by the name, but as it's spun up that app can be opened with:

`$ heroku open`

_Important_ after deploying an app in Heroku, it might be necessary to scale the app to ensure that it at least has one Dyno running. Use:

`$ heroku ps:scale web=1` before the open. 

##### Logs #####

Heroku logs can be pulled with:

`$heroku logs `

More commands are [here](https://devcenter.heroku.com/articles/logging)/

`control+c` will stop the log updates in the terminal.

##### Procfile #####

a `Procfile` is a root directory text file that explicitly declars what command should be used to starte the app deployed on Heroku. Process types are declared in the [Procfile](https://devcenter.heroku.com/articles/procfile). The tutorial file has `web: gunicorn gettingstarted.wsgi` which sets the process type a web process which attaches to the HTTP routinh stack and will recieve web traffic. More on [HTTP Routing](https://devcenter.heroku.com/articles/http-routing).

##### Scaline the App #####
the `Procfile` commands are ran inside containers called _dynos_. The activity of dynos can be set with:
`$ heroku ps` 
Scaling changes the number of dynos assigned to processes. 

`$ heroku ps:scale web=1`

##### Decalare Dependencies #####

Just like any other environment, Heroku recognizes the `requirements.txt` and looks for dependencies. Just like normal, use `$ pip install -r requirements.txt` to install the files locally. However, to run packages locally Postgres must be [installed](https://devcenter.heroku.com/articles/heroku-postgresql#local-setup). 

##### Run the app locally #####

Djang uses local asses, so we need to run ` collectstatic`:

`$ python manage.py collectstatic`

The on unix the `procfile` can be used by default by declaring `web`.

`heroku local web`. 

The http://localhost:5000/ displayed will run the program in the browser. 

##### Push local changes #####

Local Files can be modified, but to deploy the files __must__ be added to the repo.

`$ git add .`

Then Commit:

`git commit -m "Demo"`

Then deploy with a `push`.

`git push heroku main`

`heroku open`

##### Using an Add-on #####

Points from the Documentation: 
* Add-ons are third-party cloud services: persistence, logging, monitoring, etc...
* 1500 logs are stored by default. However, this can be manipulated with add-ons such as email and SMS alerts. 

Papertrail isa free add-on used in the demo. 

`heroku addons:create papertrail`

Lists of addons can be seen with:

`$heroku addons`

To open:

`$ heroku addons:open papertrail`

##### Start a Console #####

Heroku can be told to run a command _in the Dyno_. A console can be opened with:

`$ heroku run [python] [program.py] shell` 

Additionally, a bash shell can be ran with:

`$ heroku run bash`

##### Define Config Vars #####

Apps run in multiple environments, and the environment specific configurations should be stored in environment variables (Not the source code). These are the [Configs](https://12factor.net/config).

`$ heroku config` displays the configuration of the instance being run. 

`$ heroku config:set TIMES=2`
The `config:set` command defines config environment variables. 

##### Provision a Database #####

Databases are addons, and therefore information can be found on them with `heroku addons`. 

The Url for the database will be displayed in the _config vars_ for the app using:

`$ heroku config`

`$ heroku pg` Shows more about the database and the licensing. 





